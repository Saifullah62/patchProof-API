openapi: 3.0.3
info:
  title: PatchProof API
  version: 1.0.0
  description: A secure API for registering digital assets ("patches"), managing ownership, and performing cryptographic authentication using Signature Value Distribution (SVD).
  contact:
    name: API Support
    url: https://www.patchproof.com/support
    email: support@patchproof.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.proofpatch.com
    description: Production Server
  - url: http://localhost:3001
    description: Local Development Server

# Reusable components for a clean and consistent spec
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: A static API key for authenticating client applications.
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A JSON Web Token (JWT) for authenticating end-users.

  schemas:
    # --- Request Bodies (SVD) ---
    SvdRegisterBody:
      type: object
      properties:
        userId:
          type: string
          description: MongoDB ObjectId-like hex (24 hex chars)
          example: '507f1f77bcf86cd799439011'
        pmcHex:
          type: string
          description: Compressed secp256k1 public key in hex (66 hex chars, starts with 02/03, on-curve).
          example: '02a34b5c6d7e8899aabbccddeeff00112233445566778899aabbccddeeff001122'
      required: [userId, pmcHex]

    SvdBeginBody:
      type: object
      properties:
        userId:
          type: string
          description: MongoDB ObjectId-like hex (24 hex chars)
          example: '507f1f77bcf86cd799439011'
      required: [userId]

    SvdCompleteBody:
      type: object
      properties:
        userId:
          type: string
          description: MongoDB ObjectId-like hex (24 hex chars)
          example: '507f1f77bcf86cd799439011'
        M:
          type: string
          description: The server-provided challenge from /api/svd/begin.
          example: 'aabbccddeeff00112233445566778899aabbccddeeff0011'
        signatureHex:
          type: string
          description: DER-encoded ECDSA signature over M (hex encoded).
          example: '3045022100a1b2c3...'
      required: [userId, M, signatureHex]

    RegisterPatchBody:
      type: object
      properties:
        product:
          type: object
          properties:
            uid_tag_id:
              type: string
              description: The unique identifier for the patch or tag.
              example: 'patch-xyz-789'
            name:
              type: string
              example: 'Limited Edition Jacket'
          required: [uid_tag_id]
        metadata:
          type: object
          properties:
            notes:
              type: string
              example: 'Batch #42, manufactured on 2025-08-11.'
        auth:
          type: object
          properties:
            owner:
              type: string
              description: The initial owner's BSV address.
              example: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'
      required: [product, auth]

    TransferOwnershipBody:
      type: object
      properties:
        newOwnerAddress:
          type: string
          description: The BSV address of the new owner.
          example: '12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX'
        currentOwnerSignature:
          type: string
          format: hex
          description: A DER-encoded signature from the current owner.
        currentOwnerPubKey:
          type: string
          format: hex
          description: The compressed public key of the current owner.
      required: [newOwnerAddress, currentOwnerSignature, currentOwnerPubKey]

    # --- Response Objects ---
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'unauthorized'
        message:
          type: string
          example: 'Invalid API key.'

    PatchRecord:
      type: object
      properties:
        # Define the full structure of a patch record here for reusability
        uid_tag_id:
          type: string
        # ... other fields

  responses:
    Unauthorized:
      description: Unauthorized. The API key is missing or invalid, or the JWT is missing/expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden. The caller is not the owner of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not Found. The requested resource does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

# API Paths
paths:
  /__ping:
    get:
      summary: Ping
      description: Lightweight liveness check.
      tags: [Health]
      responses:
        '200':
          description: Service is reachable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pong: { type: boolean, example: true }
                  ts: { type: string, example: '2025-01-01T00:00:00.000Z' }
  /health:
    get:
      summary: Health Check
      description: A simple endpoint to check if the API service is running.
      tags: [Health]
      responses:
        '200':
          description: Service is running.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: 'ok' }

  /ready:
    get:
      summary: Readiness Check
      description: Indicates whether all dependencies are ready (DB, Redis, etc.).
      tags: [Health]
      responses:
        '200':
          description: Service is ready to accept traffic.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready: { type: boolean, example: true }

  /api/svd/kid:
    get:
      summary: Get active SVD KID
      description: Returns the active SVD key identifier clients should use. Response is cacheable for up to 300 seconds.
      tags: [Authentication]
      responses:
        '200':
          description: The current KID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kid: { type: string, example: 'svd-kms' }

  /api/svd/register:
    post:
      summary: Register PMC
      description: Registers the user's public master key (PMC).
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SvdRegisterBody'
      responses:
        '201':
          description: PMC registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: 'PMC registered successfully.' }
        '400':
          description: Validation error (e.g., invalid userId or pmcHex).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: PMC already registered for this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/svd/begin:
    post:
      summary: Begin SVD
      description: Initializes an SVD session and returns a challenge M.
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SvdBeginBody'
      responses:
        '200':
          description: Challenge generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  M: { type: string, example: 'abcdef...' }
                  pmcHex: { type: string, example: '02abcd...ef' }

  /api/svd/complete:
    post:
      summary: Complete SVD
      description: Submits the signature over M; returns a JWT upon success.
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SvdCompleteBody'
      responses:
        '200':
          description: Verification successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, description: 'JWT' }
        '400':
          description: Bad challenge or missing PMC.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid signature.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Replay detected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/patches:
    post:
      summary: Register a New Patch
      description: Creates a new, immutable registration record for a digital asset and anchors it to the blockchain.
      tags: [Patches]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPatchBody'
      responses:
        '202':
          description: Accepted. The registration has been queued for processing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: 'Registration has been queued for processing.' }
                  jobId: { type: string }
                  txid: { type: string, description: "The future transaction ID of the record." }
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: A patch with this uid_tag_id already exists.

  /v1/patches/verify/{uid_tag_id}:
    get:
      summary: Verify a Patch
      description: Retrieves the latest authentication record for a given patch to verify its authenticity and current owner.
      tags: [Patches]
      parameters:
        - in: path
          name: uid_tag_id
          schema: { type: string }
          required: true
          description: The unique identifier of the patch to verify.
      responses:
        '200':
          description: The verification result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchRecord'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/patches/{txid}/transfer-ownership:
    post:
      summary: Transfer Patch Ownership
      description: Creates a new transaction to transfer the ownership of a patch to a new address. Requires a signature from the current owner.
      tags: [Patches]
      security:
        - BearerAuth: [] # Requires end-user authentication
      parameters:
        - in: path
          name: txid
          schema: { type: string, format: hex, description: "The TXID of the patch's current state." }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferOwnershipBody'
      responses:
        '202':
          description: Accepted. The transfer has been queued for processing.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: The patch state has changed since the request was initiated (Optimistic Lock Failure).