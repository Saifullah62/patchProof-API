# .github/workflows/ci.yml

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  unit-and-lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create env file (unit)
        run: |
          cat > .env << 'EOF'
          NODE_ENV=test
          JWT_SECRET=test_jwt_secret
          API_KEY=test_api_key
          MASTER_SECRET=test_master_secret
          KMS_SIGN_URL=mock
          KMS_API_KEY=mock
          ISSUER_KEY_IDENTIFIER=test-issuer-key-id
          SVD_USE_KMS=0
          SVD_KMS_KID=svd-kms
          WOC_NETWORK=test
          METRICS_REQUIRE_API_KEY=0
          EOF

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint --if-present

      - name: Run unit tests (with JUnit)
        env:
          CI: true
          JEST_JUNIT_OUTPUT: reports/junit-unit.xml
        run: |
          mkdir -p reports
          npm test --if-present -- --reporters=default --reporters=jest-junit

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: |
            coverage/
            coverage/**

      - name: Upload JUnit Report (unit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-unit
          path: reports/junit-unit.xml

  e2e:
    runs-on: ubuntu-latest
    needs: unit-and-lint
    permissions:
      contents: read
    services:
      mongo:
        image: mongo:6
        ports: ["27017:27017"]
        options: >-
          --health-cmd "mongosh --quiet --eval \"db.adminCommand({ ping: 1 })\" || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create env file (e2e)
        run: |
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=3001
          MONGODB_URI=mongodb://127.0.0.1:27017/patchproof_e2e
          REDIS_URL=redis://127.0.0.1:6379
          JWT_SECRET=test_jwt_secret
          API_KEY=test_api_key
          MASTER_SECRET=test_master_secret
          KMS_SIGN_URL=mock
          KMS_API_KEY=mock
          ISSUER_KEY_IDENTIFIER=test-issuer-key-id
          SVD_USE_KMS=0
          SVD_KMS_KID=svd-kms
          CORS_ALLOWED_ORIGINS=http://localhost:3000
          WOC_NETWORK=test
          METRICS_REQUIRE_API_KEY=0
          EOF

      - name: Install dependencies
        run: npm install

      - name: Start server
        run: |
          nohup npm start > server.log 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:3001/health > /dev/null; then
              echo "Server is up"
              break
            fi
            sleep 2
          done
          curl -fsS http://127.0.0.1:3001/health

      - name: Run E2E tests (with JUnit)
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3001
          JEST_JUNIT_OUTPUT: reports/junit-e2e.xml
        run: |
          mkdir -p reports
          npm run test:e2e -- --reporters=default --reporters=jest-junit

      - name: Upload JUnit Report (e2e)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-e2e
          path: reports/junit-e2e.xml

      - name: Upload Server Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-log
          path: server.log
