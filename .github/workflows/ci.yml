name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Job 1: Run Linting and Unit Tests
  unit-and-lint:
    name: Lint & Unit Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Create .env file for testing
        run: |
          cat > .env << 'EOF'
          NODE_ENV=test
          JWT_SECRET=test_jwt_secret
          API_KEY=test_api_key
          MASTER_SECRET=test_master_secret
          KMS_SIGN_URL=mock
          KMS_API_KEY=mock
          ISSUER_KEY_IDENTIFIER=test-issuer-key-id
          SVD_USE_KMS=0
          SVD_KMS_KID=svd-kms
          WOC_NETWORK=test
          METRICS_REQUIRE_API_KEY=0
          EOF

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run unit tests
        env:
          CI: true
          JEST_JUNIT_OUTPUT: reports/junit-unit.xml
        run: |
          mkdir -p reports
          npm test --if-present -- --reporters=default --reporters=jest-junit

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/

      - name: Upload JUnit Report (unit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-unit
          path: reports/junit-unit.xml

  # Job 2: Run End-to-End Tests
  e2e:
    name: E2E Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-and-lint # Depends on the first job
    services:
      mongo:
        image: mongo:6
        ports: ['27017:27017']
        options: >-
          --health-cmd "mongosh --quiet --eval \"db.adminCommand({ ping: 1 })\" || exit 1"
          --health-interval 10s --health-timeout 5s --health-retries 20
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 20
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Create .env file for E2E tests
        run: |
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=3001
          MONGODB_URI=mongodb://127.0.0.1:27017/patchproof_e2e
          REDIS_URL=redis://127.0.0.1:6379
          JWT_SECRET=test_jwt_secret
          API_KEY=test_api_key
          MASTER_SECRET=test_master_secret
          KMS_SIGN_URL=mock
          KMS_API_KEY=mock
          ISSUER_KEY_IDENTIFIER=test-issuer-key-id
          SVD_USE_KMS=0
          SVD_KMS_KID=svd-kms
          CORS_ALLOWED_ORIGINS=http://localhost:3000
          WOC_NETWORK=test
          METRICS_REQUIRE_API_KEY=0
          EOF

      - name: Install dependencies
        run: npm ci

      - name: Start server in background
        run: |
          nohup npm start > server.log 2>&1 &
          # Wait for the server to become healthy
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:3001/health > /dev/null; then
              echo "Server is up"
              break
            fi
            sleep 2
          done
          # Final check to fail the step if server is not up
          curl -fsS http://127.0.0.1:3001/health

      - name: Run E2E tests
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3001
          JEST_JUNIT_OUTPUT: reports/junit-e2e.xml
        run: |
          mkdir -p reports
          npm run test:e2e -- --reporters=default --reporters=jest-junit

      - name: Upload JUnit Report (e2e)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-e2e
          path: reports/junit-e2e.xml

      - name: Upload Server Log on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-log-e2e
          path: server.log

  # Job 3: Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: e2e # Run only after all tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Deploy only on a push to the main branch

    steps:
      - name: Deploy to Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Executing deployment script on host..."
            # The deploy script handles pulling code, installing dependencies,
            # and restarting the service.
            /bin/bash /opt/patchproof/ops/deploy.sh
